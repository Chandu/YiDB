package ${entityPackage};

<#if listPackage!="">
import ${listPackage};
import java.util.ArrayList;
</#if>
<#if datePackage!="">
import ${datePackage};
</#if>
<#if jsonPackage!="">
import ${jsonPackage};
</#if>


<#if inherit="GenericCMSEntity">
import ${inheritParent}.${inherit};
</#if>

import ${jacksonPackage};

/**
 * CMS generated entity.
 * This class is generated by CMS type-safe api model exporter, DON'T modify this class.
 * 
 */
public class ${className} extends ${inherit} {

	<#list properties as pro>
	<#if pro.propType=="enumeration">
	public enum <@upperFC>${pro.propName}</@upperFC>Enum {
		<#list pro.enumList as el>
		<#if el_index+1 == pro.enumLength>
		EV_${el.enumElementName}("${el.enumElementValue}");
		<#else>
		EV_${el.enumElementName}("${el.enumElementValue}"),
		</#if>
		</#list>

		private String value;

        <@upperFC>${pro.propName}</@upperFC>Enum(String val) {
            value = val;
        }

        public String getValue() {
            return value;
        }
        
        public static <@upperFC>${pro.propName}</@upperFC>Enum fromString(String val) {
		    if (val == null || val.length() < 1) {
		        return null;
		    }
		    for (<@upperFC>${pro.propName}</@upperFC>Enum v : <@upperFC>${pro.propName}</@upperFC>Enum.values()) {
		        if (v.toString().equalsIgnoreCase(val)) {
		            return v;
		        }
		    }
		    return null;
        }
        
        public String toString() {
        	return value;
        }
	}
	</#if>
	</#list>

	public ${className}() {
		set_type(get_metaclass());
		// set_repo("${repoName}");
	}

	// the getter/setter method
	
	<#list properties as pro>
	<#if pro.propType=="relationship">
		<#if pro.propCardinality=="One">
		
	public ${pro.propRefName} get<@upperFC>${pro.propName}</@upperFC>(){
		return (${pro.propRefName})getFieldValue("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(${pro.propRefName} attrVal_${pro.propName}){
		setFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		<#else>
		
	public List<${pro.propRefName}> get<@upperFC>${pro.propName}</@upperFC>(){
		return (List<${pro.propRefName}>) getFieldValue("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(List<${pro.propRefName}> attrVals_${pro.propName}){
		setFieldValue("${pro.propName}", attrVals_${pro.propName});
	}
	
	public void add<@upperFC>${pro.propName}</@upperFC>(${pro.propRefName} attrVal_${pro.propName}){
		addFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		</#if>
	<#elseif pro.propType=="enumeration">
		<#if pro.propCardinality == "One">
		
	public <@upperFC>${pro.propName}</@upperFC>Enum get<@upperFC>${pro.propName}</@upperFC>(){
		Object val = getFieldValue("${pro.propName}");
		if (val instanceof <@upperFC>${pro.propName}</@upperFC>Enum) {
			return (<@upperFC>${pro.propName}</@upperFC>Enum)val;
		}
		return <@upperFC>${pro.propName}</@upperFC>Enum.fromString((String)getFieldValue("${pro.propName}"));
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(<@upperFC>${pro.propName}</@upperFC>Enum attrVal_${pro.propName}){
		setFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		<#else>
		
	public List<<@upperFC>${pro.propName}</@upperFC>Enum> get<@upperFC>${pro.propName}</@upperFC>(){
		List list = (List)getFieldValue("${pro.propName}");
		if (list == null) {
			return null;
		}
		List<<@upperFC>${pro.propName}</@upperFC>Enum> result = new ArrayList<<@upperFC>${pro.propName}</@upperFC>Enum>();
		for (Object val : list) {
			if (val instanceof <@upperFC>${pro.propName}</@upperFC>Enum) {
				result.add((<@upperFC>${pro.propName}</@upperFC>Enum)val);
			} else {
				result.add(<@upperFC>${pro.propName}</@upperFC>Enum.fromString((String)val));
			}
		}
		return result;
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(List<<@upperFC>${pro.propName}</@upperFC>Enum> attrVals_${pro.propName}){
		setFieldValue("${pro.propName}", attrVals_${pro.propName});
	}
	
	public void add<@upperFC>${pro.propName}</@upperFC>(<@upperFC>${pro.propName}</@upperFC>Enum attrVal_${pro.propName}){
		addFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		</#if>
	<#elseif pro.propType=="Date">
		<#if pro.propCardinality=="One">

	public ${pro.propType} get<@upperFC>${pro.propName}</@upperFC>(){
		return (${pro.propType}) getDateField("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		setDateField("${pro.propName}", attrVal_${pro.propName});
	}
		<#else>
		
	public List<${pro.propType}> get<@upperFC>${pro.propName}</@upperFC>(){
		List list = (List)getFieldValue("${pro.propName}");
		if (list == null) {
			return null;
		}
		List<${pro.propType}> result = new ArrayList<${pro.propType}>();
		for (Object val : list) {
			if (val instanceof ${pro.propType}) {
				result.add((${pro.propType})val);
			} else {
				result.add(new Date((Long) val));
			}
		}
		return result;
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(List<${pro.propType}> attrVals_${pro.propName}){
		setDateField("${pro.propName}", attrVals_${pro.propName});
	}

	public void add<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		addFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		</#if>
	<#elseif pro.propType=="Long">
		<#if pro.propCardinality=="One">
	// long field handling : json will convert long value as integer, need convert
	public ${pro.propType} get<@upperFC>${pro.propName}</@upperFC>(){
		return (${pro.propType}) getLongField("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		setLongField("${pro.propName}", attrVal_${pro.propName});
	}
		<#else>
	// long field handling : json will convert long value as integer, need convert
	public List<${pro.propType}> get<@upperFC>${pro.propName}</@upperFC>(){
		List list = (List)getFieldValue("${pro.propName}");
		if (list == null) {
			return null;
		}
		List<${pro.propType}> result = new ArrayList<${pro.propType}>();
		for (Object val : list) {
			if (val instanceof ${pro.propType}) {
				result.add((${pro.propType})val);
			} else {
				result.add(new Long(((Number) val)).longValue());
			}
		}
		return result;
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(List<${pro.propType}> attrVals_${pro.propName}){
		setLongField("${pro.propName}", attrVals_${pro.propName});
	}

	public void add<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		addFieldValue("${pro.propName}", attrVal_${pro.propName});
	}			
		</#if>
	<#else>
		<#if pro.propCardinality=="One">

	public ${pro.propType} get<@upperFC>${pro.propName}</@upperFC>(){
		return (${pro.propType})getFieldValue("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		setFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		<#else>
		
	public List<${pro.propType}> get<@upperFC>${pro.propName}</@upperFC>(){
		return (List<${pro.propType}>)getFieldValue("${pro.propName}");
	}

	public void set<@upperFC>${pro.propName}</@upperFC>(List<${pro.propType}> attrVals_${pro.propName}){
		setFieldValue("${pro.propName}", attrVals_${pro.propName});
	}

	public void add<@upperFC>${pro.propName}</@upperFC>(${pro.propType} attrVal_${pro.propName}){
		addFieldValue("${pro.propName}", attrVal_${pro.propName});
	}
		</#if>
	</#if>
	</#list>

	@JsonIgnore
	public String get_metaclass(){
		return "${className}";
	}
	
}